buildscript {
	ext {
		springBootVersion = '1.5.1.RELEASE'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath "org.ajoberstar:gradle-git:1.6.0"
//		classpath "org.ajoberstar:gradle-git-publish:0.1.1-rc.1"
	}
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'org.ajoberstar.grgit'
apply plugin: 'jacoco'
//apply plugin: 'org.ajoberstar.git-publish'

jar {
	baseName = 'beisbol'
	version = '0.0.1-SNAPSHOT'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
	mavenCentral()
}


dependencies {
	compile('org.springframework.boot:spring-boot-starter-actuator')
	compile('org.springframework.boot:spring-boot-starter-web')
	compile('org.projectlombok:lombok')
	testCompile('org.springframework.boot:spring-boot-starter-test')
	testCompile('org.apache.httpcomponents:httpclient:4.3.3')
}

test {
	testLogging {
		// Show test events in the command-line output
		events 'started', 'passed'
	}
}

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
    }
}

check.dependsOn jacocoTestReport



// some git playbaby tasks...



// Push one file to git
//   $ gradlew -Pfile=<file> gitpush
task gitpush << {
    //def grgit = org.ajoberstar.grgit.Grgit.open(dir: '.')
    //grgit.add(patterns: ['version.properties'])
    grgit.add(patterns: ["$file"])
    // other thoughts... grgit.add(patterns: ['file'])  or ['${file}']
    grgit.commit(message: 'Commit test')
    grgit.push()   //(force: true) // not sure I would recommend this
}



// some git tasks from gradle-git wiki
/*
version = "1.0.0-${grgit.head().abbreviatedId}"

task tagRelease {
  description = 'Tags the current head with the project\'s version.'
  doLast {
    grgit.tag.add {
      name = version
      message = "Release of ${version}"
    }
  }
}

task pushToOrigin {
  description = 'Pushes current branch\'s committed changes to origin repo.'
  doLast {
    grgit.push()
  }
}
*/





// some tasks from stackexchange
/*
task createTag(type: GitTag) {
   repoPath = rootDir
   tagName = yourTag
   message = "Application release ${project.version.toString()}"
}

task pushTag(type: GitPush, dependsOn: createTag) {
   namesOrSpecs = [yourTag]
}
*/